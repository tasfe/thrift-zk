package com.thrift.zk.soa.zookeeper;import com.thrift.zk.soa.exception.SoaException;import com.thrift.zk.soa.pool.ShardedThriftPoolManage;import com.thrift.zk.soa.thrift.NodeInfo;import com.thrift.zk.soa.thrift.route.RpcRoute;import com.thrift.zk.soa.thrift.server.ServerRegisterInfo;import com.thrift.zk.soa.utils.JsonUtil;import com.xj.zk.ZkClient;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.nio.charset.Charset;/** * Author:  xiajun * Date: 16/11/01 00:13 */public class ThriftZkManage {    private final static Logger LOGGER = LoggerFactory.getLogger(ThriftZkManage.class);    private ZkClient zkClient;    private ShardedThriftPoolManage poolManage;    private String serverPath;    private RpcRoute route;    public ThriftZkManage(String hosts, int sessionTimeout, int connectionTimeout, ShardedThriftPoolManage poolManage, RpcRoute route) {        zkClient = new ZkClient(hosts, sessionTimeout, connectionTimeout);        this.poolManage = poolManage;        this.route = route;    }    /**     * 无zookeeper模式。     * 直连服务端rpc，由于thrift没心跳检测，当服务端某台机器宕机后会导致客户端调用失败。     *     * @param hosts     */    public ThriftZkManage(String hosts, RpcRoute route) {        if (hosts == null || "".equals(hosts)) {            throw new IllegalArgumentException("Thrift rpc server hosts is null.");        }        this.route = route;        String[] ips = hosts.split(",");        for (int i = 0; i < ips.length; i++) {            String[] ip_port = ips[i].split(":");            if (ip_port.length > 1) {                NodeInfo nodeInfo = new NodeInfo();                nodeInfo.setIp(ip_port[0]);                nodeInfo.setPort(Integer.parseInt(ip_port[1]));                nodeInfo.setPath(ip_port[0] + ":" + ip_port[1]);                route.addServerNode(nodeInfo);            }        }    }    /**     * 设置zk监听的节点。     * @param path zk节点     */    public void listen(String path) {        this.serverPath = path;        zkClient.listenChild(path, new ZkNodeListener(this));    }    protected void addNode(String path) {        byte[] data = zkClient.getData(path);        NodeInfo info = JsonUtil.parse(new String(data), NodeInfo.class);        info.setPath(path);        route.addServerNode(info);        LOGGER.info("Server online success, {}", path);    }    protected void removeNode(String path) {        if (route.removeServerNode(path)) {            poolManage.deletePoolObject(path);            LOGGER.info("Server shut down, {}", path);        }    }    /**     * 获取RPC服务实现类名     *     * @param path     * @return     */    public ServerRegisterInfo getServerName(String path) {        byte[] data = zkClient.getData(path);        String sri = new String(data, Charset.forName("UTF-8"));        ServerRegisterInfo info = JsonUtil.parse(sri, ServerRegisterInfo.class);        return info;    }    /**     * 获取服务端节点信息。     *     * @return     */    public NodeInfo poll() {        NodeInfo node = route.getServer();        if (node == null) {            throw new SoaException("Server all shut down. server node:" + this.serverPath);        }        return node;    }    /**     * 获取服务端节点信息。     * 通过key获取固定一个服务端节点数据。     * @param key 服务节点key     * @return     */    public NodeInfo poll(String key) {        NodeInfo node = route.getServer(key);        if (node == null) {            throw new SoaException("Server all shut down. server node:" + this.serverPath);        }        return node;    }    /**     * 获取服务器个数     *     * @return     */    public int getServers() {        return route.size();    }    public void close() {        this.zkClient.close();    }    /**     * 设置服务使用的路由方式。     * @param route 路由对象     */    public void setRoute(RpcRoute route) {        this.route = route;    }}