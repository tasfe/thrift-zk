package com.thrift.zk.soa.pool;import com.thrift.zk.soa.exception.SoaException;import com.thrift.zk.soa.exception.ThriftConnectionException;import org.apache.commons.pool2.PooledObjectFactory;import org.apache.commons.pool2.impl.GenericObjectPool;import org.apache.commons.pool2.impl.GenericObjectPoolConfig;/** * Author: xiajun * Date: 15/10/31 22:28 */public abstract class Pool<T> {    protected GenericObjectPool<T> thriftPool;    public Pool(final GenericObjectPoolConfig poolConfig, PooledObjectFactory<T> factory) {        initPool(poolConfig, factory);    }    /**     * 初始化连接池     *     * @param poolConfig     * @param factory     */    public void initPool(final GenericObjectPoolConfig poolConfig, PooledObjectFactory<T> factory) {        if (this.thriftPool != null) {            try {                closePool();            } catch (Exception e) {            }        }        this.thriftPool = new GenericObjectPool<T>(factory, poolConfig);    }    /**     * 获取连接     *     * @return     */    public T getResource() {        try {            return thriftPool.borrowObject();        } catch (Exception e) {            throw new ThriftConnectionException("Could not get a resource from the pool,maxTotal:" + thriftPool.getMaxTotal(), e);        }    }    /**     * 返回有效连接，回收到连接池     *     * @param resource     */    protected void returnResourceObject(final T resource) {        if (resource == null) {            return;        }        try {            thriftPool.returnObject(resource);        } catch (Exception e) {            throw new SoaException("Could not return the resource to the pool", e);        }    }    /**     * 回收异常的连接，将其销毁     *     * @param resource     */    protected void returnBrokenResource(final T resource) {        if (resource != null) {            returnBrokenResourceObject(resource);        }    }    /**     * 返回有效连接，回收到连接池     *     * @param resource     */    protected void returnResource(final T resource) {        if (resource != null) {            returnResourceObject(resource);        }    }    /**     * 回收异常的连接，将其销毁     *     * @param resource     */    protected void returnBrokenResourceObject(final T resource) {        try {            thriftPool.invalidateObject(resource);        } catch (Exception e) {            throw new SoaException("Could not return the resource to the pool", e);        }    }    /**     * 回收资源     *     * @param resource 连接资源     * @param force    强制删除     */    public abstract void close(final T resource, boolean force);    public void destroy() {        closePool();    }    protected void closePool() {        try {            thriftPool.close();        } catch (Exception e) {            throw new SoaException("Could not destroy the pool", e);        }    }    public int getNumActive() {        if (poolInactive()) {            return -1;        }        return this.thriftPool.getNumActive();    }    public int getNumIdle() {        if (poolInactive()) {            return -1;        }        return this.thriftPool.getNumIdle();    }    public int getNumWaiters() {        if (poolInactive()) {            return -1;        }        return this.thriftPool.getNumWaiters();    }    public long getMeanBorrowWaitTimeMillis() {        if (poolInactive()) {            return -1;        }        return this.thriftPool.getMeanBorrowWaitTimeMillis();    }    public long getMaxBorrowWaitTimeMillis() {        if (poolInactive()) {            return -1;        }        return this.thriftPool.getMaxBorrowWaitTimeMillis();    }    private boolean poolInactive() {        return this.thriftPool == null || this.thriftPool.isClosed();    }    /**     * 立即驱逐失效连接     *     * @throws Exception     */    public void evict() throws Exception {        thriftPool.evict();    }    public int getMaxIdle() {        return thriftPool.getMaxIdle();    }    public void setMaxTotal(int total) {        thriftPool.setMaxTotal(total);    }    public void addObjects(int count) {        try {            for (int i = 0; i < count; i++) {                this.thriftPool.addObject();            }        } catch (Exception e) {            throw new SoaException("Error trying to add idle objects", e);        }    }    public boolean isClosed() {        return this.thriftPool.isClosed();    }}