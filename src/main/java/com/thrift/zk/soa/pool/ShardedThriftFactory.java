package com.thrift.zk.soa.pool;import com.thrift.zk.soa.thrift.client.ShardedThrift;import com.thrift.zk.soa.thrift.client.ThriftShardedInfo;import org.apache.commons.pool2.PooledObject;import org.apache.commons.pool2.PooledObjectFactory;import org.apache.commons.pool2.impl.DefaultPooledObject;/** * Author: xiajun * Date: 15/10/31 22:23 */public class ShardedThriftFactory<T> implements PooledObjectFactory<ShardedThrift> {    private ThriftShardedInfo shardedInfo;    private ShardedThriftPoolManage poolManage;    public ShardedThriftFactory(ThriftShardedInfo shardedInfo, ShardedThriftPoolManage poolManage) {        this.shardedInfo = shardedInfo;        this.poolManage = poolManage;    }    /**     * 创建连接     * @return     * @throws Exception     */    public PooledObject<ShardedThrift> makeObject() throws Exception {        ShardedThrift<T> thrift = new ShardedThrift<T>(shardedInfo);        return new DefaultPooledObject<ShardedThrift>(thrift);    }    /**     * 销毁连接     * @param pooledObject     * @throws Exception     */    public void destroyObject(PooledObject<ShardedThrift> pooledObject) throws Exception {        ShardedThrift<T> thrift = pooledObject.getObject();        thrift.close();    }    /**     * 检查连接有效性     * @param pooledObject     * @return     */    public boolean validateObject(PooledObject<ShardedThrift> pooledObject) {        ShardedThrift<T> thrift = pooledObject.getObject();        return thrift.validate();    }    @Override    public void activateObject(PooledObject<ShardedThrift> pooledObject) throws Exception {    }    @Override    public void passivateObject(PooledObject<ShardedThrift> pooledObject) throws Exception {    }}