/* * Copyright (c) 2016. mogujie */package com.thrift.zk.soa.thrift;import com.thrift.zk.soa.thrift.route.RouteEnum;/** * Author: baichuan - xiajun * Date: 15/11/01 00:25 */public class NodeInfo {    private String path;    private String ip;    private int port;    private int weight;//权重    private String cluster;//服务所属集群    private int cweight;//当前权重    private RouteEnum route;//分流方式    public NodeInfo() {    }    public NodeInfo(String ip, int port, String cluster) {        this.ip = ip;        this.port = port;        this.cluster = cluster;    }    public String getIp() {        return ip;    }    public void setIp(String ip) {        this.ip = ip;    }    public int getPort() {        return port;    }    public void setPort(int port) {        this.port = port;    }    public String getPath() {        return path;    }    public void setPath(String path) {        this.path = path;    }    public String getCluster() {        return cluster;    }    public void setCluster(String cluster) {        this.cluster = cluster;    }    public int getWeight() {        return weight;    }    public void setWeight(int weight) {        this.weight = weight;    }    public int getCweight() {        return cweight;    }    public void setCweight(int cweight) {        this.cweight = cweight;    }    public RouteEnum getRoute() {        return route;    }    public void setRoute(RouteEnum route) {        this.route = route;    }    @Override    public boolean equals(Object o) {        if (this == o) {            return true;        }        if (o == null || getClass() != o.getClass()) {            return false;        }        if (o instanceof NodeInfo) {            NodeInfo nodeInfo = (NodeInfo) o;            if (port != nodeInfo.port) {                return false;            }            return !(ip != null ? !ip.equals(nodeInfo.ip) : nodeInfo.ip != null);        }        return false;    }    @Override    public int hashCode() {        int result = ip != null ? ip.hashCode() : 0;        result = 31 * result + port;        return result;    }}